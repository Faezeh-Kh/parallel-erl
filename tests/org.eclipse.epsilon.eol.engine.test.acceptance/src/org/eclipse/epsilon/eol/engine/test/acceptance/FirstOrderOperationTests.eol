@test
operation testSelect() {
	var data := Sequence {0..9};
	var selected = data.select(n | (n > 3 and n <= 7) or n == 2);
	var expected := Sequence {2, 4, 5, 6, 7};
	assertEquals(expected, selected);
	selected = data.select(n | n > 10);
	assertEquals(Sequence{}, selected);
	selected = data.select(n | n < 10);
	assertEquals(data, selected);
}

@test
operation testSelectOne() {
	var data := Sequence {0..9};
	var selected = data.selectOne(n | n < 4 and n > 1);
	assertEquals(2, selected);
	selected = data.selectOne(n | n == 8);
	assertEquals(8, selected);
	selected = data.selectOne(n | n > 9);
	assertEquals(null, selected);
}

@test
operation testReject() {
	var data := Sequence {0..9};
	var rejected = data.reject(n | n < 1 or n > 6 or n == 5 and n <> 9);
	var expected := Sequence {1, 2, 3, 4, 6, 9};
	assertEquals(expected, rejected);
	rejected = data.reject(n | n > 10);
	assertEquals(data, rejected);
	rejected = data.reject(n | n < 10);
	assertEquals(Sequence{}, rejected);
}

@test
operation testRejectOne() {
	var data := Sequence {0..9};
	var rejected = data.rejectOne(n | n > 3);
	data.remove(4);
	assertEquals(data, rejected);
	data.add(4);
	rejected = data.rejectOne(n | n > 9);
	assertEquals(data, rejected);
}

@test
operation testExists() {
	var data := Sequence {0..9};
	var exists = data.exists(n | n > 3 and n < 8);
	assertTrue(exists);
	exists = data.exists(n | n < 0);
	assertFalse(exists);
}

@test
operation testOne() {
	var data := Sequence {0..9};
	var one = data.one(n | n > 3 and n < 7);
	assertFalse(one);
	one = data.one(n | n == 2 or (n > 1 and n < 3));
	assertTrue(one);
	one = data.one(n | n < 0);
	assertFalse(one);
}

@test
operation testNone() {
	var data := Sequence {0..9};
	var none = data.none(n | n == null);
	assertTrue(none);
	none = data.none(n | n > 7);
	assertFalse(none);
}

@test
operation testForAll() {
	var data := Sequence {0..9};
	var forAll = data.forAll(n | n > -1 and n <= 10);
	assertTrue(forAll);
	forAll = data.forAll(n | n < 9);
	assertFalse(forAll);
}

@test
operation testCollect() {
	var data := Sequence {0..9};
	var mapped = data.collect(n | n * n);
	var expected := Sequence {0, 1, 4, 9, 16, 25, 36, 49, 64, 81};
	assertEquals(expected, mapped);
	data = Sequence {12, 10, null, false, true, "str", 3.14, 8};
	mapped = data.collect(n | 10);
	expected := Sequence {10, 10, 10, 10, 10, 10, 10, 10};
	assertEquals(expected, mapped);
}

@test
operation testSortBy() {
	var data = Bag {"a", "aa", "", true, false, "          __a_ ", "---", 333, 1, 22, 666666};
	var expected = Sequence {"", "a", 1, "aa", 22, "---", 333, true, false, 666666, "          __a_ "};
	var sorted = data.sortBy(d | d.asString().length());
	assertEquals(expected, sorted);
}

@test
operation testMapBy() {
	var data = Bag {"", 1, true, false, 98, 3, 55, 0, 4443, 768, 12024, "eol", 640, "four", "null"};
	var expected : new Map;
	expected.put(0, Sequence{""});
	expected.put(1, Sequence{1, 3, 0});
	expected.put(2, Sequence{98, 55});
	expected.put(3, Sequence{768, "eol", 640});
	expected.put(4, Sequence{true, 4443, "four", "null"});
	expected.put(5, Sequence{false, 12024});
	var actual = data.mapBy(n | n.toString().length());
	assertEquals(expected, actual);
}

@test
operation testAggregate() {
	var data = Bag {-127, -64, -2, 0, "", 32768};
	var expected = Map {
		4 = -127,
		3 = -64,
		2 = -2,
		1 = 0,
		0 = "",
		5 = 32768
	};
	var actual = data.aggregate(n | n.asString().length(), n);
	assertEquals(expected, actual);
	
	data.addAll(Bag {127, 16, true, 1, "", 9990, false, 111000});
	expected = Map {
		4 = "-127;true;9990;",
		3 = "-64;127;",
		2 = "-2;16;",
		1 = "0;1;",
		0 = ";;",
		5 = "32768;false;",
		6 = "111000;"
	};
	actual = data.aggregate(n | n.asString().length(), total+n.asString()+";", "");
	assertEquals(expected, actual);
}

@test
operation testClosure() {
	// TODO: implement
}
