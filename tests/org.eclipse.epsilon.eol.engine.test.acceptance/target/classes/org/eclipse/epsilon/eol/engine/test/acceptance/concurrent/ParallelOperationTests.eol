var testData = Bag{
	1, 2, 4, 8, 3, 9, 10, 1024, 1024768, 0,
	-2147483647, "a string", "6", 22, "0.75f", 32.0,
	12.5, 2.0000000000000000000000001, "66.2", 335d,
	350f, "a string with a num83R", null, false, 99,
	"true", "FALSE", "1", "0", "", "-2147483648",
	999999l, -1l, -2d, 0f, 7, null, 6
};

@test
operation testParallelSelectEquivalence() {
	var expected = testData.select(t |
		t <> null and
		t.asString().matches("[0-9]+(\\.[0-9]*)?(d|f|l)?") and
		t.asReal() > 22/7
	);
	
	var actual = testData.parallelSelect(t |
		t <> null and
		t.asString().matches("[0-9]+(\\.[0-9]*)?(d|f|l)?") and
		t.asReal() > 22/7
	);
	
	assertTrue(actual.containsAll(expected));
	assertEquals(actual.size(), expected.size());
}

@test
operation testParallelRejectEquivalence() {
	var expected = testData.reject(t |
		t <> null and
		t.asString().matches("[0-9]+(\\.[0-9]*)?(d|f|l)?") and
		t.asReal() > 22/7
	);
	
	var actual = testData.parallelReject(t |
		t <> null and
		t.asString().matches("[0-9]+(\\.[0-9]*)?(d|f|l)?") and
		t.asReal() > 22/7
	);
	
	assertTrue(actual.containsAll(expected));
	assertEquals(actual.size(), expected.size());
}

@test
operation testParallelSelectOneEquivalence() {
	var expected = testData.selectOne(t |
		t <> null and 
		t.asString().length() > 3 and
		(
			t.asString().matches("[0-9]+(\\.[0-9]*)?(d|f|l)?") or
			t.asString().matches("FALSE") or 
			t.asString().matches("true")
		) and t.asBoolean()
	);
	
	var actual = testData.parallelSelectOne(t |
		t <> null and 
		t.asString().length() > 3 and
		(
			t.asString().matches("[0-9]+(\\.[0-9]*)?(d|f|l)?") or
			t.asString().matches("FALSE") or 
			t.asString().matches("true")
		) and t.asBoolean()
	);
	
	assertEquals(expected, actual);
}

@test
operation testParallelExistsEquivalence() {
	var expected = testData.exists(t | t == null);
	assertTrue(expected);
	var actual = testData.parallelExists(t | t == null);
	assertEquals(expected, actual);
	
	expected = testData.exists(t | t <> null and not t.getClass().getName().startsWith("java"));
	assertFalse(expected);
	actual = testData.parallelExists(t | t <> null and not t.getClass().getName().startsWith("java"));
	assertEquals(expected, actual);
}

@test
operation testParallelOneEquivalence() {
	var expected = testData.one(t | t <> null and t.asString().isEmpty());
	assertTrue(expected);
	var actual = testData.parallelOne(t | t <> null and t.asString().isEmpty());
	assertEquals(expected, actual);
		
	expected = testData.one(t | t <> null and not t.asBoolean());
	assertFalse(expected);
	actual = testData.parallelOne(t | t <> null and not t.asBoolean());
	assertEquals(expected, actual);
}

@test
operation testParallelForAllEquivalence() {
	var expected = testData.forAll(t | t <> null);
	assertFalse(expected);
	var actual = testData.parallelForAll(t | t <> null);
	assertEquals(expected, actual);
	
	expected = testData.forAll(t |
		t == null or
		t.isKindOf(Real) or
		t.isKindOf(Integer) or
		t.asString().matches("-?[0-9]*(\\.[0-9]*(d|f|l)?)?") or
		t.asBoolean() == true or
		t.asBoolean() == false
	);
	
	assertTrue(expected);
	
	actual = testData.parallelForAll(t |
		t == null or
		t.isKindOf(Real) or
		t.isKindOf(Integer) or
		t.asString().matches("-?[0-9]*(\\.[0-9]*(d|f|l)?)?") or
		t.asBoolean() == true or
		t.asBoolean() == false
	);
	assertEquals(expected, actual);
}

@test
operation testParallelCollectEquivalence() {
	var data : new Bag;
	data.addAll(testData);
	var expected = data.collect(t | t == null or t.asString().length() >= 5);
	var actual = data.parallelCollect(t | t == null or t.asString().length() >= 5);
	assertEquals(expected.size(), actual.size());
	assertTrue(actual.includesAll(expected));
}

@test
operation testParallelSortByEquivalence() {
	var data : new Bag;
	data.add(0);
	data.add("");
	var i = 1073741824;
	while (i > 2) {
		i /= 2;
		data.add(i);
	}
	data.add("a loooooooooooooooooooong string");
	data.add(1);
	data.add(15);
	var expected = data.sortBy(n | n.asString().length());
	var actual = data.parallelSortBy(n | n.asString().length());
	assertEquals(expected, actual);
}

@test
operation testParallelSelect() {
	var data := Sequence {0..9};
	var selected = data.parallelSelect(n | (n > 3 and n <= 7) or n == 2);
	var expected := Sequence {2, 4, 5, 6, 7};
	assertEquals(expected, selected);
	selected = data.parallelSelect(n | n > 10);
	assertEquals(Sequence{}, selected);
	selected = data.parallelSelect(n | n < 10);
	assertEquals(data, selected);
}

@test
operation testParallelSelectOne() {
	var data := Sequence {0..9};
	var selected = data.parallelSelectOne(n | n < 3 and n > 1);
	assertEquals(2, selected);
	selected = data.parallelSelectOne(n | n == 8);
	assertEquals(8, selected);
	selected = data.parallelSelectOne(n | n > 9);
	assertEquals(null, selected);
}

@test
operation testParallelReject() {
	var data := Sequence {0..9};
	var rejected = data.parallelReject(n | n < 1 or n > 6 or n == 5 and n <> 9);
	var expected := Sequence {1, 2, 3, 4, 6, 9};
	assertEquals(expected, rejected);
	rejected = data.parallelReject(n | n > 10);
	assertEquals(data, rejected);
	rejected = data.parallelReject(n | n < 10);
	assertEquals(Sequence{}, rejected);
}

@test
operation testParallelExists() {
	var data := Sequence {0..9};
	var exists = data.parallelExists(n | n > 3 and n < 8);
	assertTrue(exists);
	exists = data.parallelExists(n | n < 0);
	assertFalse(exists);
}

@test
operation testParallelOne() {
	var data := Sequence {0..9};
	var one = data.parallelOne(n | n > 3 and n < 10);
	assertFalse(one);
	one = data.parallelOne(n | n == 2 or (n > 1 and n < 3));
	assertTrue(one);
}

@test
operation testParallelForAll() {
	var data := Sequence {0..9};
	var forAll = data.parallelForAll(n | n > -1 and n <= 10);
	assertTrue(forAll);
	forAll = data.parallelForAll(n | n < 9);
	assertFalse(forAll);
}

@test
operation testParallelCollect() {
	var data := Sequence {0..9};
	var mapped = data.parallelCollect(n | n * n);
	var expected := Sequence {0, 1, 4, 9, 16, 25, 36, 49, 64, 81};
	assertEquals(expected, mapped);
	data = Sequence {12, 10, null, false, true, "str", 3.14, 8};
	mapped = data.parallelCollect(n | 10);
	expected := Sequence {10, 10, 10, 10, 10, 10, 10, 10};
	assertEquals(expected, mapped);
}

@test
operation testParallelSortBy() {
	var data = Bag {"a", "", true, false, "          __a_ ", "---", 22, 666666};
	var expected = Sequence {"", "a", 22, "---", true, false, 666666, "          __a_ "};
	var sorted = data.parallelSortBy(d | d.asString().length());
	assertEquals(expected, sorted);
}
