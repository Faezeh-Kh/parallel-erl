
operation AbstractTypeDeclaration implements(type : String) {
	return self.superInterfaces.exists(si | si.type.name == type);
}

@cached
operation AbstractTypeDeclaration getMethods() : Collection {
	return self.bodyDeclarations.select(bd | bd.isKindOf(MethodDeclaration));
}

operation ClassDeclaration hasEquals() : Boolean {
	return self.getMethods().exists(method |
			method.name == "equals" and
			method.parameters.size() == 1 and
			method.parameters.first().type.type.name == "Object" and
			method.thrownExceptions.isEmpty() and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
	);
}

operation ClassDeclaration hasHashcode() : Boolean {
	return self.getMethods().exists(method |
			method.name == "hashCode" and
			method.parameters.isEmpty() and
			method.thrownExceptions.isEmpty() and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
	);
}

operation ClassDeclaration hasCompareTo() : Boolean {
	return self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.parameters.size() == 1 and
			method.parameters.first().type.type.name == "Object" and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.thrownExceptions.isEmpty() and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
	);
}

context ClassDeclaration {
	constraint hashCodeAndEquals {
		check {
			var hasEquals = self.hasEquals();
			var hasHashcode = self.hasHashcode();
			return
				(hasEquals implies hasHashcode) and
				(hasHashcode implies hasEquals);
		}
	}
	
	constraint noCovariantEquals {
		guard: self.getMethods().exists(method |
			method.name = "equals" and
			method.modifier <> null and
			method.modifier.visibility = VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeBoolean)
		)
		check: self.hasEquals()
	}
	
	constraint noCovariantCompareTo {
		guard: self.getMethods().exists(method | 
			method.name == "compareTo" and
			method.modifier.isDefined() and
			method.modifier.visibility == VisibilityKind#public and
			method.returnType.type.isTypeOf(PrimitiveTypeInt)
		)
		check: self.hasCompareTo()
	}
	
	constraint equalsAndCompareTo {
		guard: self.hasCompareTo()
		check: self.hasEquals()
	}
	
	constraint cloneInCloneable {
		guard: self.implements("Cloneable")
		check: self.getMethods().exists(md |
			md.name == "clone" and
			md.parameters.isEmpty() and
			md.thrownExceptions.size() == 1 and
			md.thrownExceptions.first().type.name == "CloneNotSupportedException" and
			md.modifier.isDefined() and
			md.modifier.visibility == VisibilityKind#public
		)
	}
	
	constraint serialUIDInSerializableClass {
		guard: self.implements("Serializable")
		check: self.bodyDeclarations.exists(bd |
			bd.isKindOf(FieldDeclaration) and
			bd.name == "serialVersionUID" and
			bd.modifier.static and
			bd.modifier.inheritance == InheritanceKind#final and
			bd.type.type.isTypeOf(PrimitiveTypeLong)
		)
	}
	
	constraint noRedundantInterfaceImpl {
		guard: self.superInterfaces.isDefined() and
				self.superClass.isDefined() and
				self.superClass.type.isKindOf(ClassDeclaration) and
				self.superClass.type.superInterfaces.isDefined()
			
			check: self.superInterfaces.exists(tIface |
				self.superClass.type.isKindOf(AbstractTypeDeclaration) implies (
					self.superClass.type.superInterfaces.includes(tIface)
				)
			)
			
	}
	
	constraint comparatorImplementsSerializable {
		guard: self.implements("Comparator") 
		check: self.implements("Serializable")
	}
	
	constraint noObscuredVariables {
		check {
			var fields = self.bodyDeclarations.select(bd | bd.isKindOf(FieldDeclaration));
			return
				self.bodyDeclarations
					.select(bd | bd.isKindOf(AbstractMethodDeclaration))
					.forAll(md | md.body.isDefined() implies md.body.statements
						.select(s | s.isKindOf(VariableDeclaration))
						.forAll(vd | fields.forAll(fd | fd.name <> vd.name))
					);
		}
	}
}