var Thread = Native("java.lang.Thread");
var mainThread = Thread.currentThread();
var shared = "global variable";

operation Collection equalsIgnoreOrder(other : Collection) {
	assertTrue(self.containsAll(other));
	assertEquals(self.size(), other.size());
}

operation Any hashAsStr() : String {
	return self.hashCode().asString();
}

@cached
operation Any lengthAsStr() : Integer {
	return self.toString().length();
}

@test
operation testSelectScope() {
	var testData := Sequence {0..16};
	var expected = testData.select(n | n.lengthAsStr() > 1 and n.lengthAsStr() < shared.length());
	assertEquals(Sequence {10..16}, expected);
	var actual = testData.parallelSelectOrdered(n | n.lengthAsStr() > 1 and n.lengthAsStr() < shared.length());
	assertEquals(expected, actual);
	actual = testData.parallelSelect(n | n.lengthAsStr() > 1 and n.lengthAsStr() < shared.length());
	actual.equalsIgnoreOrder(expected);
}

@test
operation testRejectScope() {
	var testData := Sequence {-9..16};
	var expected = testData.reject(n | n.hashAsStr().lengthAsStr() < shared.length()*2 and n.lengthAsStr() > 1);
	assertEquals(Sequence {0..9}, expected);
	var actual = testData.parallelRejectOrdered(n | n.hashAsStr().lengthAsStr() < shared.length()*2 and n.lengthAsStr() > 1);
	assertEquals(expected, actual);
	actual = testData.parallelReject(n | n.hashAsStr().lengthAsStr() < shared.length()*2 and n.lengthAsStr() > 1);
	actual.equalsIgnoreOrder(expected);
}

@test
operation testExistsScope() {
	var testData := Sequence {-9..16};
	var expected = testData.exists(n | n.hashAsStr().lengthAsStr() < shared.length()*2 and n.lengthAsStr() == 1);
	assertTrue(expected);
	var actual = testData.parallelExists(n | n.hashAsStr().lengthAsStr() < shared.length()*2 and n.lengthAsStr() == 1);
	assertEquals(expected, actual);
}

@test
operation testForAllScope() {
	var testData := Sequence {-9..12};
	var expected = testData.forAll(n | Thread.currentThread() == mainThread and n <= 16);
	assertTrue(expected);
	var actual = testData.parallelForAll(n | Thread.currentThread() <> mainThread and n < shared.lengthAsStr());
	assertEquals(expected, actual);
}

@test
operation testCollectScope() {
	var testData := Sequence {-1..15};
	var expected = testData.collect(n | Thread.currentThread().getName());
	var actual = testData.parallelCollect(n | Thread.currentThread().getName());
	assertEquals(expected.size(), actual.size());
	assertFalse(expected.exists(t | actual.contains(t)));
	actual = testData.parallelCollectOrdered(n | Thread.currentThread().getName());
	assertEquals(expected.size(), actual.size());
	assertFalse(expected.exists(t | actual.contains(t)));
}
