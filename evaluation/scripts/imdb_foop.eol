/**
 * @see http://atenea.lcc.uma.es/Descargas/LinTra/casestudies/imdb/transformations/FindCouples.etl
**/

operation Movie movieQuery() : Boolean {
	var magicPerson = Person.all.get((Person.all.size()/2).asInteger());
	return self.persons
		.collect(p | p.coactorsCached())
		.exists(a |
			a.movies <> null and
			a.hashCode() == magicPerson.hashCode() and
			a.name = magicPerson.name
		);
}

operation Person areCoupleCoactors(co : Person) : Boolean {
	return
		self.name.compareTo(co.name) < 0 and
		co.movies.size() >= threshold.asInteger() and
		self.areCouple(co);
}

@cached
operation Person coactorsCached() : Set(movies!Person) {
	return self.coactors();
}

operation Person coactors() : Set(movies!Person) {
	return self.movies.collect(m | m.persons).flatten().asSet();
}

@cached
operation Person areCouple(p : Person) : Boolean {
	return self.movies.excludingAll(p.movies).size() <= (self.movies.size() - threshold.asInteger());
}
